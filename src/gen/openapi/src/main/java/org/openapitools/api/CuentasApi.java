/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccountResponse;
import org.openapitools.model.BalanceResponse;
import org.openapitools.model.CreateAccountRequest;
import org.openapitools.model.DepositRequest;
import org.openapitools.model.WithdrawRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-05T20:52:54.519635800-05:00[America/Lima]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "cuentas", description = "the cuentas API")
public interface CuentasApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /cuentas/{cuentaId}/depositar : Depositar en cuenta
     *
     * @param cuentaId  (required)
     * @param depositRequest  (required)
     * @return Depósito exitoso (status code 200)
     *         or Monto inválido (status code 400)
     */
    @Operation(
        operationId = "cuentasCuentaIdDepositarPut",
        summary = "Depositar en cuenta",
        responses = {
            @ApiResponse(responseCode = "200", description = "Depósito exitoso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BalanceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Monto inválido")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cuentas/{cuentaId}/depositar",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BalanceResponse> cuentasCuentaIdDepositarPut(
        @Parameter(name = "cuentaId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cuentaId") Integer cuentaId,
        @Parameter(name = "DepositRequest", description = "", required = true) @Valid @RequestBody DepositRequest depositRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"balance\" : 6.027456183070403, \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /cuentas/{cuentaId}/retirar : Retirar de cuenta
     *
     * @param cuentaId  (required)
     * @param withdrawRequest  (required)
     * @return Retiro exitoso (status code 200)
     *         or Monto inválido o sobregiro no permitido (status code 400)
     */
    @Operation(
        operationId = "cuentasCuentaIdRetirarPut",
        summary = "Retirar de cuenta",
        responses = {
            @ApiResponse(responseCode = "200", description = "Retiro exitoso", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BalanceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Monto inválido o sobregiro no permitido")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cuentas/{cuentaId}/retirar",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BalanceResponse> cuentasCuentaIdRetirarPut(
        @Parameter(name = "cuentaId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cuentaId") Integer cuentaId,
        @Parameter(name = "WithdrawRequest", description = "", required = true) @Valid @RequestBody WithdrawRequest withdrawRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"balance\" : 6.027456183070403, \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cuentas : Listar todas las cuentas
     *
     * @return Lista de cuentas (status code 200)
     */
    @Operation(
        operationId = "cuentasGet",
        summary = "Listar todas las cuentas",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de cuentas", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cuentas",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AccountResponse>> cuentasGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"clientId\" : 1, \"balance\" : 6.027456183070403, \"id\" : 0, \"accountNumber\" : \"accountNumber\", \"type\" : \"type\" }, { \"clientId\" : 1, \"balance\" : 6.027456183070403, \"id\" : 0, \"accountNumber\" : \"accountNumber\", \"type\" : \"type\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /cuentas/{id} : Eliminar cuenta
     *
     * @param id  (required)
     * @return Cuenta eliminada (status code 204)
     *         or Cuenta no encontrada (status code 404)
     */
    @Operation(
        operationId = "cuentasIdDelete",
        summary = "Eliminar cuenta",
        responses = {
            @ApiResponse(responseCode = "204", description = "Cuenta eliminada"),
            @ApiResponse(responseCode = "404", description = "Cuenta no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/cuentas/{id}"
    )
    
    default ResponseEntity<Void> cuentasIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cuentas/{id} : Obtener cuenta por ID
     *
     * @param id  (required)
     * @return Cuenta encontrada (status code 200)
     *         or Cuenta no encontrada (status code 404)
     */
    @Operation(
        operationId = "cuentasIdGet",
        summary = "Obtener cuenta por ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Cuenta encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cuenta no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cuentas/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AccountResponse> cuentasIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"clientId\" : 1, \"balance\" : 6.027456183070403, \"id\" : 0, \"accountNumber\" : \"accountNumber\", \"type\" : \"type\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /cuentas : Crear cuenta bancaria
     *
     * @param createAccountRequest  (required)
     * @return Cuenta creada exitosamente (status code 201)
     *         or Datos inválidos o cliente no encontrado (status code 400)
     */
    @Operation(
        operationId = "cuentasPost",
        summary = "Crear cuenta bancaria",
        responses = {
            @ApiResponse(responseCode = "201", description = "Cuenta creada exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Datos inválidos o cliente no encontrado")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cuentas",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AccountResponse> cuentasPost(
        @Parameter(name = "CreateAccountRequest", description = "", required = true) @Valid @RequestBody CreateAccountRequest createAccountRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"clientId\" : 1, \"balance\" : 6.027456183070403, \"id\" : 0, \"accountNumber\" : \"accountNumber\", \"type\" : \"type\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
